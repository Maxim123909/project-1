import telebot
import sqlite3
from datetime import datetime, timedelta
import threading
import time as t

bot = telebot.TeleBot('–í–ê–®_–¢–û–ö–ï–ù')
conn = sqlite3.connect('medicine.db', check_same_thread=False)
cursor = conn.cursor()

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}
reminder_timers = {}

def init_db():
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS medicines (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        name TEXT,
        dosage TEXT,
        time TEXT,
        taken INTEGER DEFAULT 0,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )''')
    conn.commit()

init_db()

@bot.message_handler(commands=['start'])
def start(message):
    help_text = """
üíä –ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/add - –¥–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤
/confirm - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏–µ–º
/delete - —É–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
/history - –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–µ–º–∞
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
"""
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['help'])
def show_help(message):
    start(message)

@bot.message_handler(commands=['add'])
def add_medicine(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:")
    user_states[message.chat.id] = {'action': 'add_name'}
    bot.register_next_step_handler(msg, process_medicine_step)

def process_medicine_step(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        return
    
    if user_states[chat_id]['action'] == 'add_name':
        user_states[chat_id] = {
            'action': 'add_dosage',
            'name': message.text
        }
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 —Ç–∞–±–ª–µ—Ç–∫–∞, 50 –º–≥):")
        bot.register_next_step_handler(message, process_medicine_step)
    
    elif user_states[chat_id]['action'] == 'add_dosage':
        user_states[chat_id] = {
            'action': 'add_time',
            'name': user_states[chat_id]['name'],
            'dosage': message.text
        }
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")
        bot.register_next_step_handler(message, process_medicine_step)
    
    elif user_states[chat_id]['action'] == 'add_time':
        try:
            time_str = message.text
            datetime.strptime(time_str, '%H:%M')
            
            cursor.execute('''
                INSERT INTO medicines (user_id, name, dosage, time)
                VALUES (?, ?, ?, ?)''',
                (chat_id, user_states[chat_id]['name'], 
                 user_states[chat_id]['dosage'], time_str))
            conn.commit()
            
            bot.send_message(chat_id, 
                f"‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ {user_states[chat_id]['name']} –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {time_str}")
            del user_states[chat_id]
            
        except ValueError:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
            del user_states[chat_id]

@bot.message_handler(commands=['list'])
def list_medicines(message):
    cursor.execute('''
        SELECT name, dosage, time FROM medicines 
        WHERE user_id = ? AND taken = 0
        ORDER BY time''', (message.chat.id,))
    medicines = cursor.fetchall()
    
    if not medicines:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤.")
        return
    
    text = "üíä –í–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:\n\n"
    for med in medicines:
        text += f"- {med[0]} ({med[1]}) –≤ {med[2]}\n"
    
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['confirm'])
def confirm_medication(message):
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if chat_id in reminder_timers:
        cursor.execute('''
            SELECT name, dosage FROM medicines
            WHERE user_id = ? AND taken = 0
            ORDER BY timestamp DESC LIMIT 1''',
            (chat_id,))
        medicine = cursor.fetchone()
        
        if medicine:
            name, dosage = medicine
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            cursor.execute('''
                UPDATE medicines SET taken = 1, timestamp = ?
                WHERE user_id = ? AND name = ? AND dosage = ? AND taken = 0''',
                (current_time, chat_id, name, dosage))
            conn.commit()
            
            reminder_timers[chat_id].cancel()
            del reminder_timers[chat_id]
            
            bot.send_message(chat_id, f"‚úÖ –ü—Ä–∏–µ–º {name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ {current_time[11:16]}")
            return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
    cursor.execute('''
        SELECT name, dosage, time FROM medicines
        WHERE user_id = ? AND taken = 0
        ORDER BY timestamp DESC LIMIT 1''',
        (chat_id,))
    medicine = cursor.fetchone()
    
    if not medicine:
        bot.send_message(chat_id, "–ù–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return
    
    name, dosage, time_str = medicine
    send_reminder(chat_id, name, dosage, time_str)
    bot.send_message(chat_id, 
        f"‚è∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–µ–º: {name} ({dosage})\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /confirm –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

def send_reminder(chat_id, name, dosage, time_str):
    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if chat_id in reminder_timers:
        reminder_timers[chat_id].cancel()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç
    timer = threading.Timer(300.0, send_reminder, [chat_id, name, dosage, time_str])
    timer.start()
    reminder_timers[chat_id] = timer
    
    bot.send_message(chat_id,
        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–µ–º {name} ({dosage})!\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /confirm –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

@bot.message_handler(commands=['delete'])
def delete_medicine(message):
    cursor.execute('''
        SELECT id, name, dosage, time FROM medicines
        WHERE user_id = ? AND taken = 0''',
        (message.chat.id,))
    medicines = cursor.fetchall()
    
    if not medicines:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for i, med in enumerate(medicines, 1):
        text += f"{i}. {med[1]} ({med[2]}) –≤ {med[3]}\n"
    
    user_states[message.chat.id] = {
        'action': 'delete',
        'medicines': medicines
    }
    bot.send_message(message.chat.id, text)
    bot.register_next_step_handler(message, process_delete)

def process_delete(message):
    chat_id = message.chat.id
    if chat_id not in user_states or user_states[chat_id]['action'] != 'delete':
        return
    
    try:
        choice = int(message.text)
        medicines = user_states[chat_id]['medicines']
        
        if 1 <= choice <= len(medicines):
            med_id = medicines[choice-1][0]
            cursor.execute("DELETE FROM medicines WHERE id = ?", (med_id,))
            conn.commit()
            bot.send_message(chat_id, "‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ!")
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
    
    except ValueError:
        bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–µ–∫–∞—Ä—Å—Ç–≤–∞!")
    
    del user_states[chat_id]

@bot.message_handler(commands=['history'])
def show_history(message):
    cursor.execute('''
        SELECT name, dosage, time, taken, timestamp
        FROM medicines WHERE user_id = ?
        ORDER BY timestamp DESC LIMIT 10''',
        (message.chat.id,))
    history = cursor.fetchall()
    
    if not history:
        bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–µ–º–∞ –ø—É—Å—Ç–∞.")
        return
    
    text = "üíä –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–µ–º–∞:\n\n"
    for item in history:
        status = "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ" if item[3] else "‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ"
        time = datetime.strptime(item[4], '%Y-%m-%d %H:%M:%S').strftime('%d.%m %H:%M')
        text += f"{item[0]} ({item[1]}) - {status} –≤ {time}\n"
    
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['stats'])
def show_stats(message):
    cursor.execute('''
        SELECT COUNT(*) FROM medicines WHERE user_id = ?''',
        (message.chat.id,))
    total = cursor.fetchone()[0]
    
    cursor.execute('''
        SELECT COUNT(*) FROM medicines
        WHERE user_id = ? AND taken = 1''',
        (message.chat.id,))
    taken = cursor.fetchone()[0]
    
    if total == 0:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    percent = (taken / total) * 100
    text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–µ–º–∞:
    
–í—Å–µ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤: {total}
‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {taken} ({percent:.1f}%)
‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {total - taken}"""
    
    bot.send_message(message.chat.id, text)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
