import telebot
import sqlite3
from datetime import datetime, timedelta
import threading
from telebot import types

bot = telebot.TeleBot('')
conn = sqlite3.connect('medicine.db', check_same_thread=False)
c = conn.cursor()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    c.execute('''CREATE TABLE IF NOT EXISTS medicines
                (id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER, 
                name TEXT, 
                dosage TEXT, 
                time TEXT, 
                taken INTEGER DEFAULT 0,
                taken_time TEXT,
                last_reminded TEXT)''')
    conn.commit()


init_db()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('/add'), types.KeyboardButton('/list'))
    bot.send_message(message.chat.id,
                     "üíä –ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö\n\n"
                     "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                     "/add - –¥–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ\n"
                     "/list - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤",
                     reply_markup=markup)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
@bot.message_handler(commands=['add'])
def add_medicine(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:",
                           reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, lambda m: process_medicine(m, 'name'))


# –°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤
@bot.message_handler(commands=['list'])
def list_medicines(message):
    c.execute("SELECT name, dosage, time FROM medicines WHERE user_id = ? AND taken = 0",
              (message.from_user.id,))
    medicines = c.fetchall()

    if not medicines:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤.")
        return

    text = "üíä –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:\n\n"
    for idx, med in enumerate(medicines, 1):
        text += f"{idx}. {med[0]} ({med[1]}) –≤ {med[2]}\n"

    bot.send_message(message.chat.id, text)


# –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
def process_medicine(message, step, data=None):
    if step == 'name':
        if message.text.startswith('/'):
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞.")
            return

        data = {'name': message.text, 'user_id': message.from_user.id}
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫—É:")
        bot.register_next_step_handler(msg, lambda m: process_medicine(m, 'dosage', data))

    elif step == 'dosage':
        data['dosage'] = message.text
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ (–ß–ß:–ú–ú):")
        bot.register_next_step_handler(msg, lambda m: process_medicine(m, 'time', data))

    elif step == 'time':
        try:
            datetime.strptime(message.text, '%H:%M')
            c.execute('''INSERT INTO medicines 
                        (user_id, name, dosage, time) 
                        VALUES (?, ?, ?, ?)''',
                      (data['user_id'], data['name'], data['dosage'], message.text))
            conn.commit()

            threading.Thread(target=remind,
                             args=(data['user_id'], data['name'],
                                   data['dosage'], message.text)).start()

            bot.send_message(message.chat.id,
                             f"‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ {data['name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {message.text}!")
        except ValueError:
            bot.send_message(message.chat.id,
                             "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00 –∏–ª–∏ 14:30).")
        finally:
            start(message)


# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
def remind(user_id, name, dosage, time_str):
    while True:
        now = datetime.now().strftime('%H:%M')
        if now == time_str:
            send_reminder(user_id, name, dosage, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
            break


# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
def send_reminder(user_id, name, dosage, prefix):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è–ª", callback_data=f"taken_{name}_{dosage}"),
        types.InlineKeyboardButton("üîÑ –ß–µ—Ä–µ–∑ 5 –º–∏–Ω", callback_data=f"later_{name}_{dosage}")
    )

    bot.send_message(user_id,
                     f"{prefix}: –ø—Ä–∏–º–∏ {name} ({dosage})!",
                     reply_markup=markup)


# –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
def remind_later(user_id, name, dosage):
    reminder_time = (datetime.now() + timedelta(minutes=5)).strftime('%H:%M:%S')
    c.execute('''UPDATE medicines SET last_reminded = ? 
                WHERE user_id = ? AND name = ? AND dosage = ? AND taken = 0''',
              (reminder_time, user_id, name, dosage))
    conn.commit()

    threading.Timer(300, lambda: send_reminder(user_id, name, dosage, "‚è∞ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")).start()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º callback_data —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å—Ç–µ–π
        parts = call.data.split('_')
        if len(parts) < 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")

        action, name, dosage = parts[:3]
        user_id = call.from_user.id
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        if action == "taken":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
            c.execute('''UPDATE medicines 
                        SET taken = 1, taken_time = ?
                        WHERE user_id = ? AND name = ? AND dosage = ? AND taken = 0''',
                      (current_time, user_id, name, dosage))
            conn.commit()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if c.rowcount == 0:
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_text = f"‚úÖ {call.message.text}\n(–ü—Ä–∏–Ω—è—Ç–æ –≤ {current_time[11:16]})"

            # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.answer_callback_query(call.id, f"‚úÖ {name} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç—ã–π!")
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=new_text,
                reply_markup=None
            )

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∞–¥–º–∏–Ω—É)
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–Ω—è–ª {name} –≤ {current_time}")

        elif action == "later":
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            remind_later(user_id, name, dosage)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_text = f"üîÑ {call.message.text}\n(–ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç)"

            # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.answer_callback_query(call.id, "–Ø –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç ‚è∞")
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=new_text,
                reply_markup=None
            )

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ª–æ–∂–∏–ª {name} –≤ {current_time}")

        else:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    except ValueError as ve:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {ve}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot.answer_callback_query(
            call.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            show_alert=True
        )


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    bot.infinity_polling()
