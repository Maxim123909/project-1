import telebot
import sqlite3
from datetime import datetime, timedelta
import threading
import time
from threading import Timer

bot = telebot.TeleBot('')
conn = sqlite3.connect('medicine.db', check_same_thread=False)
cursor = conn.cursor()

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}
pending_confirmations = {}  # –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
active_reminders = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è


def init_db():
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS medicines (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        name TEXT,
        dosage TEXT,
        time TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS medicine_history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        medicine_id INTEGER,
        taken_time DATETIME,
        FOREIGN KEY(medicine_id) REFERENCES medicines(id)
    )''')
    conn.commit()


init_db()


def schedule_check():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞"""
    while True:
        now = datetime.now().strftime('%H:%M')
        today = datetime.now().strftime('%Y-%m-%d')

        # –ü–æ–ª—É—á–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å —Å–µ–π—á–∞—Å –∏ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç—ã —Å–µ–≥–æ–¥–Ω—è
        cursor.execute('''
            SELECT m.id, m.user_id, m.name, m.dosage, m.time 
            FROM medicines m
            WHERE m.time = ?
            AND NOT EXISTS (
                SELECT 1 FROM medicine_history h 
                WHERE h.medicine_id = m.id 
                AND DATE(h.taken_time) = ?
            )''', (now, today))
        medicines = cursor.fetchall()

        for med in medicines:
            med_id, user_id, name, dosage, time_str = med
            if user_id not in pending_confirmations:
                pending_confirmations[user_id] = (med_id, name, dosage, time_str)
                bot.send_message(user_id,
                                 f"‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å {name} ({dosage})!\n"
                                 "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–µ–º –∫–æ–º–∞–Ω–¥–æ–π /confirm")

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç)
                t = Timer(300.0, send_reminder, [user_id, med_id, name, dosage, time_str])
                t.start()
                active_reminders[user_id] = t

        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


def send_reminder(user_id, med_id, name, dosage, time_str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    if user_id in pending_confirmations and pending_confirmations[user_id][0] == med_id:
        bot.send_message(user_id,
                         f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–∏–µ–º {name} ({dosage}) –≤ {time_str}!\n"
                         "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–µ–º –∫–æ–º–∞–Ω–¥–æ–π /confirm")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–µ—â–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç)
        t = Timer(300.0, send_reminder, [user_id, med_id, name, dosage, time_str])
        t.start()
        active_reminders[user_id] = t


@bot.message_handler(commands=['start', 'help'])
def start(message):
    help_text = """
üíä –ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/add - –¥–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤
/confirm - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏–µ–º
/delete - —É–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
/history - –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–µ–º–∞
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
"""
    bot.send_message(message.chat.id, help_text)


@bot.message_handler(commands=['add'])
def add_medicine(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:")
    user_states[message.chat.id] = {'action': 'add_name'}
    bot.register_next_step_handler(msg, process_medicine_step)


def process_medicine_step(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        return

    if user_states[chat_id]['action'] == 'add_name':
        user_states[chat_id] = {
            'action': 'add_dosage',
            'name': message.text
        }
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 —Ç–∞–±–ª–µ—Ç–∫–∞, 50 –º–≥):")
        bot.register_next_step_handler(message, process_medicine_step)

    elif user_states[chat_id]['action'] == 'add_dosage':
        user_states[chat_id] = {
            'action': 'add_time',
            'name': user_states[chat_id]['name'],
            'dosage': message.text
        }
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")
        bot.register_next_step_handler(message, process_medicine_step)

    elif user_states[chat_id]['action'] == 'add_time':
        try:
            time_str = message.text
            datetime.strptime(time_str, '%H:%M')  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏

            cursor.execute('''
                INSERT INTO medicines (user_id, name, dosage, time)
                VALUES (?, ?, ?, ?)''',
                           (chat_id, user_states[chat_id]['name'],
                            user_states[chat_id]['dosage'], time_str))
            conn.commit()

            bot.send_message(chat_id,
                             f"‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ {user_states[chat_id]['name']} –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {time_str}")
            del user_states[chat_id]

        except ValueError:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
            del user_states[chat_id]


@bot.message_handler(commands=['list'])
def list_medicines(message):
    chat_id = message.chat.id
    today = datetime.now().strftime('%Y-%m-%d')

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('''
        SELECT id, name, dosage, time FROM medicines 
        WHERE user_id = ?
        ORDER BY time''', (chat_id,))
    medicines = cursor.fetchall()

    if not medicines:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤.")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –ª–µ–∫–∞—Ä—Å—Ç–≤, –ø—Ä–∏–Ω—è—Ç—ã—Ö —Å–µ–≥–æ–¥–Ω—è
    cursor.execute('''
        SELECT medicine_id FROM medicine_history 
        WHERE user_id = ? 
        AND DATE(taken_time) = ?''', (chat_id, today))
    taken_today_ids = [row[0] for row in cursor.fetchall()]

    text = "üíä –í–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:\n\n"
    for med in medicines:
        med_id, name, dosage, time_str = med
        status = "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ —Å–µ–≥–æ–¥–Ω—è" if med_id in taken_today_ids else "‚ùå –ù–µ –ø—Ä–∏–Ω—è—Ç–æ"
        text += f"- {name} ({dosage}) –≤ {time_str} - {status}\n"

    bot.send_message(chat_id, text)


@bot.message_handler(commands=['confirm'])
def confirm_medication(message):
    chat_id = message.chat.id
    today = datetime.now().strftime('%Y-%m-%d')

    if chat_id in pending_confirmations:
        med_id, name, dosage, time_str = pending_confirmations[chat_id]
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        cursor.execute('''
            INSERT INTO medicine_history (user_id, medicine_id, taken_time)
            VALUES (?, ?, ?)''', (chat_id, med_id, current_time))
        conn.commit()

        # –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if chat_id in active_reminders:
            active_reminders[chat_id].cancel()
            del active_reminders[chat_id]

        del pending_confirmations[chat_id]
        bot.send_message(chat_id, f"‚úÖ –ü—Ä–∏–µ–º {name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ {current_time[11:16]}")
        list_medicines(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å
        cursor.execute('''
            SELECT m.id, m.name, m.dosage, m.time 
            FROM medicines m
            WHERE m.user_id = ?
            AND NOT EXISTS (
                SELECT 1 FROM medicine_history h 
                WHERE h.medicine_id = m.id 
                AND DATE(h.taken_time) = ?
            )''', (chat_id, today))
        medicines = cursor.fetchall()

        if not medicines:
            bot.send_message(chat_id, "–ù–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            return

        text = "–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n\n"
        for i, med in enumerate(medicines, 1):
            text += f"{i}. {med[1]} ({med[2]}) –≤ {med[3]}\n"

        user_states[chat_id] = {
            'action': 'confirm_select',
            'medicines': medicines
        }
        bot.send_message(chat_id, text)
        bot.register_next_step_handler(message, process_confirm_select)


def process_confirm_select(message):
    chat_id = message.chat.id
    if chat_id not in user_states or user_states[chat_id]['action'] != 'confirm_select':
        return

    try:
        choice = int(message.text)
        medicines = user_states[chat_id]['medicines']
        today = datetime.now().strftime('%Y-%m-%d')

        if 1 <= choice <= len(medicines):
            med_id, name, dosage, time_str = medicines[choice - 1]
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            cursor.execute('''
                INSERT INTO medicine_history (user_id, medicine_id, taken_time)
                VALUES (?, ?, ?)''', (chat_id, med_id, current_time))
            conn.commit()

            bot.send_message(chat_id, f"‚úÖ –ü—Ä–∏–µ–º {name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ {current_time[11:16]}")
            list_medicines(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")

    except ValueError:
        bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–µ–∫–∞—Ä—Å—Ç–≤–∞!")

    del user_states[chat_id]


@bot.message_handler(commands=['delete'])
def delete_medicine(message):
    cursor.execute('''
        SELECT id, name, dosage, time FROM medicines
        WHERE user_id = ?''', (message.chat.id,))
    medicines = cursor.fetchall()

    if not medicines:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for i, med in enumerate(medicines, 1):
        text += f"{i}. {med[1]} ({med[2]}) –≤ {med[3]}\n"

    user_states[message.chat.id] = {
        'action': 'delete',
        'medicines': medicines
    }
    bot.send_message(message.chat.id, text)
    bot.register_next_step_handler(message, process_delete)


def process_delete(message):
    chat_id = message.chat.id
    if chat_id not in user_states or user_states[chat_id]['action'] != 'delete':
        return

    try:
        choice = int(message.text)
        medicines = user_states[chat_id]['medicines']

        if 1 <= choice <= len(medicines):
            med_id = medicines[choice - 1][0]

            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏ –∏—Å—Ç–æ—Ä–∏–∏
            cursor.execute("DELETE FROM medicines WHERE id = ?", (med_id,))
            cursor.execute("DELETE FROM medicine_history WHERE medicine_id = ?", (med_id,))
            conn.commit()

            # –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if chat_id in pending_confirmations and pending_confirmations[chat_id][0] == med_id:
                del pending_confirmations[chat_id]
                if chat_id in active_reminders:
                    active_reminders[chat_id].cancel()
                    del active_reminders[chat_id]

            bot.send_message(chat_id, "‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ!")
            list_medicines(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")

    except ValueError:
        bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–µ–∫–∞—Ä—Å—Ç–≤–∞!")

    del user_states[chat_id]


@bot.message_handler(commands=['history'])
def show_history(message):
    cursor.execute('''
        SELECT m.name, m.dosage, m.time, h.taken_time
        FROM medicine_history h
        JOIN medicines m ON h.medicine_id = m.id
        WHERE h.user_id = ?
        ORDER BY h.taken_time DESC LIMIT 10''', (message.chat.id,))
    history = cursor.fetchall()

    if not history:
        bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–µ–º–∞ –ø—É—Å—Ç–∞.")
        return

    text = "üíä –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–µ–º–∞:\n\n"
    for item in history:
        taken_time = datetime.strptime(item[3], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
        text += f"{item[0]} ({item[1]}) - –ø—Ä–∏–Ω—è—Ç–æ –≤ {taken_time}\n"

    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=['stats'])
def show_stats(message):
    today = datetime.now().strftime('%Y-%m-%d')
    chat_id = message.chat.id

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤
    cursor.execute('SELECT COUNT(*) FROM medicines WHERE user_id = ?', (chat_id,))
    total_medicines = cursor.fetchone()[0]

    # –ü—Ä–∏–Ω—è—Ç–æ —Å–µ–≥–æ–¥–Ω—è
    cursor.execute('''
        SELECT COUNT(DISTINCT medicine_id) 
        FROM medicine_history 
        WHERE user_id = ? AND DATE(taken_time) = ?''', (chat_id, today))
    taken_today = cursor.fetchone()[0]

    # –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è
    cursor.execute('''
        SELECT COUNT(*) 
        FROM medicines m
        WHERE m.user_id = ?
        AND NOT EXISTS (
            SELECT 1 FROM medicine_history h 
            WHERE h.medicine_id = m.id 
            AND DATE(h.taken_time) = ?
        )''', (chat_id, today))
    missed_today = cursor.fetchone()[0]

    text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–µ–º–∞:

–í—Å–µ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤: {total_medicines}
–°–µ–≥–æ–¥–Ω—è:
‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {taken_today}
‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {missed_today}"""

    bot.send_message(chat_id, text)


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞
    reminder_thread = threading.Thread(target=schedule_check)
    reminder_thread.daemon = True
    reminder_thread.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
