import telebot
from telebot import types
import sqlite3
from datetime import datetime, time
import time as t
import threading

token = ''
bot = telebot.TeleBot(token)

conn = sqlite3.connect('medicine.db', check_same_thread=False)
cursor = conn.cursor()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS medicines (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        name TEXT,
        dosage TEXT,
        time TEXT,
        taken INTEGER DEFAULT 0,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS incompatible_meds (
        med1 TEXT,
        med2 TEXT,
        warning TEXT
    )
    ''')

    try:
        cursor.executemany('''
        INSERT OR IGNORE INTO incompatible_meds (med1, med2, warning) VALUES (?, ?, ?)
        ''', [
            ('–ò–±—É–ø—Ä–æ—Ñ–µ–Ω', '–ê—Å–ø–∏—Ä–∏–Ω', '–ú–æ–∂–µ—Ç —É—Å–∏–ª–∏–≤–∞—Ç—å —Ä–∏—Å–∫ –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–π'),
            ('–ü–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª', '–ê–ª–∫–æ–≥–æ–ª—å', '–¢–æ–∫—Å–∏—á–Ω–æ –¥–ª—è –ø–µ—á–µ–Ω–∏'),
            ('–ê–º–æ–∫—Å–∏—Ü–∏–ª–ª–∏–Ω', '–ú–µ—Ç—Ä–æ–Ω–∏–¥–∞–∑–æ–ª', '–£—Å–∏–ª–∏–≤–∞–µ—Ç –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã')
        ])
        conn.commit()
    except sqlite3.IntegrityError:
        pass


init_db()


def show_main_menu(chat_id, first_name):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('üíä –î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ', 'üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–∞')
    markup.add('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', '‚ùå –£–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ')
    markup.add('‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')

    bot.send_message(
        chat_id,
        f'–ü—Ä–∏–≤–µ—Ç, {first_name}! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=markup
    )


@bot.message_handler(commands=['start'])
def start(message):
    show_main_menu(message.chat.id, message.from_user.first_name)


@bot.message_handler(func=lambda message: message.text == 'üíä –î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ')
def add_medicine(message):
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:', reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_name_step)


def process_name_step(message):
    name = message.text
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –¥–æ–∑–∏—Ä–æ–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —Ç–∞–±–ª–µ—Ç–∫–∞ –∏–ª–∏ 50 –º–≥):')
    bot.register_next_step_handler(msg, process_dosage_step, name)


def process_dosage_step(message, name):
    dosage = message.text
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00 –∏–ª–∏ 14:30):')
    bot.register_next_step_handler(msg, process_time_step, name, dosage)


def process_time_step(message, name, dosage):
    try:
        time_str = message.text
        datetime.strptime(time_str, '%H:%M')

        user_id = message.from_user.id
        cursor.execute(
            'INSERT INTO medicines (user_id, name, dosage, time) VALUES (?, ?, ?, ?)',
            (user_id, name, dosage, time_str)
        )
        conn.commit()

        threading.Thread(target=schedule_reminder, args=(user_id, name, dosage, time_str)).start()
        bot.send_message(message.chat.id, f'‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ "{name}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {time_str}!')
        show_main_menu(message.chat.id, message.from_user.first_name)
    except ValueError:
        bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.')
        show_main_menu(message.chat.id, message.from_user.first_name)


@bot.message_handler(func=lambda message: message.text == 'üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–∞')
def show_history(message):
    user_id = message.from_user.id
    cursor.execute(
        'SELECT name, dosage, time, taken, timestamp FROM medicines WHERE user_id = ? ORDER BY timestamp DESC',
        (user_id,)
    )
    medicines = cursor.fetchall()

    if not medicines:
        bot.send_message(message.chat.id, '–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–∞ –ø—É—Å—Ç–∞.')
        return

    history_text = 'üíä –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤:\n\n'
    for med in medicines:
        status = '‚úÖ –ü—Ä–∏–Ω—è—Ç–æ' if med[3] else '‚ùå –ù–µ –ø—Ä–∏–Ω—è—Ç–æ'
        date_time = datetime.strptime(med[4], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
        history_text += f'{med[0]} ({med[1]}) –≤ {med[2]} - {status} ({date_time})\n'

    bot.send_message(message.chat.id, history_text)


@bot.message_handler(func=lambda message: message.text == '‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å')
def check_compatibility(message):
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –¥–≤–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ò–±—É–ø—Ä–æ—Ñ–µ–Ω, –ê—Å–ø–∏—Ä–∏–Ω"):',
                           reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_compatibility_check)


def process_compatibility_check(message):
    meds = [m.strip() for m in message.text.split(',')]
    if len(meds) != 2:
        bot.send_message(message.chat.id, '‚ùå –í–≤–µ–¥–∏ —Ä–æ–≤–Ω–æ –¥–≤–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞!')
        show_main_menu(message.chat.id, message.from_user.first_name)
        return

    cursor.execute(
        'SELECT warning FROM incompatible_meds WHERE (med1 = ? AND med2 = ?) OR (med1 = ? AND med2 = ?)',
        (meds[0], meds[1], meds[1], meds[0])
    )
    warning = cursor.fetchone()

    if warning:
        bot.send_message(message.chat.id, f'‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: {warning[0]}')
    else:
        bot.send_message(message.chat.id, '‚úÖ –≠—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –º–æ–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–º–µ—Å—Ç–µ (–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Å—è —Å –≤—Ä–∞—á–æ–º).')

    show_main_menu(message.chat.id, message.from_user.first_name)


@bot.message_handler(func=lambda message: message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ')
def delete_medicine(message):
    user_id = message.from_user.id
    cursor.execute(
        'SELECT id, name, dosage, time FROM medicines WHERE user_id = ? AND taken = 0',
        (user_id,)
    )
    medicines = cursor.fetchall()

    if not medicines:
        bot.send_message(message.chat.id, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')
        return

    medicines_text = '–í—ã–±–µ—Ä–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä):\n\n'
    medicines_list = []
    for i, med in enumerate(medicines, 1):
        medicines_text += f'{i}. {med[1]} ({med[2]}) –≤ {med[3]}\n'
        medicines_list.append(med[0])

    msg = bot.send_message(message.chat.id, medicines_text, reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_delete_medicine, medicines_list)


def process_delete_medicine(message, medicines_list):
    try:
        choice = int(message.text)
        if 1 <= choice <= len(medicines_list):
            medicine_id = medicines_list[choice - 1]
            cursor.execute('DELETE FROM medicines WHERE id = ?', (medicine_id,))
            conn.commit()
            bot.send_message(message.chat.id, '‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ!')
        else:
            bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!')
    except ValueError:
        bot.send_message(message.chat.id, '‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ!')

    show_main_menu(message.chat.id, message.from_user.first_name)


@bot.message_handler(func=lambda message: message.text == '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ')
def take_medicine(message):
    user_id = message.from_user.id
    cursor.execute(
        'SELECT id, name, dosage, time FROM medicines WHERE user_id = ? AND taken = 0',
        (user_id,)
    )
    medicines = cursor.fetchall()

    if not medicines:
        bot.send_message(message.chat.id, '–ù–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –ø—Ä–∏—ë–º–∞.')
        return

    medicines_text = '–í—ã–±–µ—Ä–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –ø—Ä–∏–Ω—è–ª (–Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä):\n\n'
    medicines_list = []
    for i, med in enumerate(medicines, 1):
        medicines_text += f'{i}. {med[1]} ({med[2]}) –≤ {med[3]}\n'
        medicines_list.append(med[0])

    msg = bot.send_message(message.chat.id, medicines_text, reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_take_medicine, medicines_list)


def process_take_medicine(message, medicines_list):
    try:
        choice = int(message.text)
        if 1 <= choice <= len(medicines_list):
            medicine_id = medicines_list[choice - 1]
            cursor.execute(
                'UPDATE medicines SET taken = 1, timestamp = CURRENT_TIMESTAMP WHERE id = ?',
                (medicine_id,)
            )
            conn.commit()
            bot.send_message(message.chat.id, '‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç–æ–µ!')
        else:
            bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!')
    except ValueError:
        bot.send_message(message.chat.id, '‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ!')

    show_main_menu(message.chat.id, message.from_user.first_name)


@bot.message_handler(func=lambda message: message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def show_statistics(message):
    user_id = message.from_user.id

    cursor.execute('SELECT COUNT(*) FROM medicines WHERE user_id = ?', (user_id,))
    total = cursor.fetchone()[0]

    cursor.execute('SELECT COUNT(*) FROM medicines WHERE user_id = ? AND taken = 1', (user_id,))
    taken = cursor.fetchone()[0]

    cursor.execute('SELECT COUNT(*) FROM medicines WHERE user_id = ? AND taken = 0', (user_id,))
    not_taken = cursor.fetchone()[0]

    if total == 0:
        bot.send_message(message.chat.id, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.')
        return

    percentage_taken = (taken / total) * 100

    cursor.execute('''
    SELECT DATE(timestamp) as day, 
           SUM(CASE WHEN taken = 1 THEN 1 ELSE 0 END) as taken_count,
           SUM(CASE WHEN taken = 0 THEN 1 ELSE 0 END) as not_taken_count
    FROM medicines 
    WHERE user_id = ? AND timestamp >= DATE('now', '-7 days')
    GROUP BY day
    ORDER BY day DESC
    ''', (user_id,))
    weekly_stats = cursor.fetchall()

    stats_text = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏—ë–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤:\n\n'
    stats_text += f'–í—Å–µ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤: {total}\n'
    stats_text += f'‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {taken} ({percentage_taken:.1f}%)\n'
    stats_text += f'‚ùå –ù–µ –ø—Ä–∏–Ω—è—Ç–æ: {not_taken}\n\n'
    stats_text += 'üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n'

    for day in weekly_stats:
        day_date = datetime.strptime(day[0], '%Y-%m-%d').strftime('%d.%m.%Y')
        stats_text += f'\n{day_date}:\n'
        stats_text += f'  ‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {day[1]}\n'
        stats_text += f'  ‚ùå –ù–µ –ø—Ä–∏–Ω—è—Ç–æ: {day[2]}\n'

    bot.send_message(message.chat.id, stats_text)


def schedule_reminder(user_id, name, dosage, time_str):
    try:
        while True:
            now = datetime.now().strftime('%H:%M')
            if now == time_str:
                bot.send_message(user_id, f'‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø—Ä–∏–º–∏ {name} ({dosage})!')
                t.sleep(60)
            t.sleep(30)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏:", e)


@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    show_main_menu(message.chat.id, message.from_user.first_name)


if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    bot.infinity_polling()
